AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Exported by architect/package@1.2.7 on 2020-03-10T03:19:27.296Z
Resources:
  Website:
    Type: AWS::Serverless::Api
    Properties:
      StageName: production
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Ref: AWS::StackName
        paths:
          /:
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /date/{year}:
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDateYear.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /date/{year}/{month}:
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDateYearMonth.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /file/{file}:
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFileFile.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /rss/{version}:
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRssVersion.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /atom/{version}:
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAtomVersion.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /json/{version}:
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetJsonVersion.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /{proxy+}:
            x-amazon-apigateway-any-method:
              parameters:
              - name: proxy
                in: path
                required: true
                schema:
                  type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                passthroughBehavior: when_no_match
                httpMethod: POST
                cacheNamespace: xlr8r
                cacheKeyParameters:
                - method.request.path.proxy
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /_static/{proxy+}:
            x-amazon-apigateway-any-method:
              parameters:
              - name: proxy
                in: path
                required: true
                schema:
                  type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - http://${bukkit}.s3.${AWS::Region}.amazonaws.com/{proxy}
                  - bukkit:
                      Ref: StaticBucket
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                passthroughBehavior: when_no_match
                httpMethod: ANY
                cacheNamespace: xlr8r2
                cacheKeyParameters:
                - method.request.path.proxy
                type: http_proxy
      EndpointConfiguration: REGIONAL
      BinaryMediaTypes:
      - '*~1*'
      MinimumCompressionSize: 0
  GetIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://website-cfn-deployments-4fe6b/6c7c8640344cfee03b678c410b4a09ed
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: website
          ARC_HTTP: aws_proxy
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetIndexEvent:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:
              Ref: Website
  GetDateYear:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://website-cfn-deployments-4fe6b/a96d534c942bcc547b7c56807bd73fbf
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: website
          ARC_HTTP: aws_proxy
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetDateYearEvent:
          Type: Api
          Properties:
            Path: /date/{year}
            Method: GET
            RestApiId:
              Ref: Website
  GetDateYearMonth:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://website-cfn-deployments-4fe6b/5e450df5b9ed78b7ed8bfe20efae725d
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: website
          ARC_HTTP: aws_proxy
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetDateYearMonthEvent:
          Type: Api
          Properties:
            Path: /date/{year}/{month}
            Method: GET
            RestApiId:
              Ref: Website
  GetFileFile:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://website-cfn-deployments-4fe6b/31c2f19c04cacf44d5d9bd052c30d680
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: website
          ARC_HTTP: aws_proxy
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetFileFileEvent:
          Type: Api
          Properties:
            Path: /file/{file}
            Method: GET
            RestApiId:
              Ref: Website
  GetRssVersion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://website-cfn-deployments-4fe6b/6877026a0175c09c533e391b7c9f9d2f
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: website
          ARC_HTTP: aws_proxy
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetRssVersionEvent:
          Type: Api
          Properties:
            Path: /rss/{version}
            Method: GET
            RestApiId:
              Ref: Website
  GetAtomVersion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://website-cfn-deployments-4fe6b/c622166620ea5c6cdda15aef004448fe
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: website
          ARC_HTTP: aws_proxy
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetAtomVersionEvent:
          Type: Api
          Properties:
            Path: /atom/{version}
            Method: GET
            RestApiId:
              Ref: Website
  GetJsonVersion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://website-cfn-deployments-4fe6b/890a8c690a8c7ef1c3e5ba44001db4b9
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: website
          ARC_HTTP: aws_proxy
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetJsonVersionEvent:
          Type: Api
          Properties:
            Path: /json/{version}
            Method: GET
            RestApiId:
              Ref: Website
  InvokeProxyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: GetIndex
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/*
        - restApiId:
            Ref: Website
  StaticBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ArcGlobalPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*
      - PolicyName: ArcStaticBucketPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:DeleteObject
            Resource:
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}
              - bukkit:
                  Ref: StaticBucket
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}/*
              - bukkit:
                  Ref: StaticBucket
  StaticBucketParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: bucket
      Value:
        Ref: StaticBucket
  StaticFingerprintParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: fingerprint
      Value: 'false'
  ParameterStorePolicy:
    Type: AWS::IAM::Policy
    DependsOn: Role
    Properties:
      PolicyName: ArcParameterStorePolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ssm:GetParametersByPath
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}
            - {}
      Roles:
      - Ref: Role
Outputs:
  API:
    Description: API Gateway
    Value:
      Fn::Sub:
      - https://${restApiId}.execute-api.${AWS::Region}.amazonaws.com/production
      - restApiId:
          Ref: Website
  restApiId:
    Description: HTTP restApiId
    Value:
      Ref: Website
  BucketURL:
    Description: Bucket URL
    Value:
      Fn::Sub:
      - http://${bukkit}.s3-website-${AWS::Region}.amazonaws.com
      - bukkit:
          Ref: StaticBucket
